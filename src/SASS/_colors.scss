/// When Use {$all_colors} Map This Is a Simple Prototype
/// @param { $Key } Map Key Value
/// @return { $Color } Map Colors
/// @example {
///   background: map-get($map: YOUR_MAP [$all_colors], $key: YOUR_MAP_KEY/_VALUE);
/// }
/// @author { Vexel Inc. || Ahmed Moharem & VS Code }

// Map Contains All VX[Vexel] New Row Colors
$all_colors: (
    // Binary Blue Colors
    BLUE: blue '!default',
    BLUE_VIOLET: blueviolet '!default',
    BLUE1x1: rgb(6, 6, 214),
    BLUE2x1: rgb(6, 6, 165),
    BLUE3x1: rgb(3, 3, 133),
    BLUE4x1: rgb(1, 1, 66),
    BLUE5x1: rgb(1, 1, 43),
    BLUE6x1: rgb(1, 1, 26),
    BLUE7x1: rgb(0, 0, 14),
    /* 2 */
    BLUE1x2: rgb(58, 58, 255),
    BLUE1x3: rgb(97, 97, 252),
    BLUE1x4: rgb(122, 122, 250),
    BLUE1x5: rgb(148, 148, 255),
    BLUE1x6: rgb(168, 168, 250),
    BLUE1x7: rgb(199, 199, 253),
    // Binary Green Colors
    GREEN: green '!default',
    GREEN1x1: rgb(13, 214, 6),
    GREEN2x1: rgb(6, 165, 40),
    GREEN3x1: rgb(3, 133, 20),
    GREEN4x1: rgb(1, 66, 10),
    GREEN5x1: rgb(1, 43, 8),
    GREEN6x1: rgb(1, 26, 2),
    GREEN7x1: rgb(0, 14, 3),
    /* 2 */
    GREEN1x2: rgb(58, 255, 107),
    GREEN1x3: rgb(97, 252, 123),
    GREEN1x4: rgb(126, 250, 122),
    GREEN1x5: rgb(148, 255, 175),
    GREEN1x6: rgb(168, 250, 179),
    GREEN1x7: rgb(199, 253, 208),
    // Binary Red Colors
    RED: red '!default',
    RED1x1: rgb(214, 6, 6),
    RED2x1: rgb(165, 6, 6),
    RED3x1: rgb(133, 3, 3),
    RED4x1: rgb(66, 1, 1),
    RED5x1: rgb(43, 1, 1),
    RED6x1: rgb(26, 1, 1),
    RED7x1: rgb(14, 0, 0),
    /* 2 */
    RED1x2: rgb(255, 58, 58),
    RED1x3: rgb(252, 97, 97),
    RED1x4: rgb(250, 122, 122),
    RED1x5: rgb(255, 148, 148),
    RED1x6: rgb(250, 168, 168),
    RED1x7: rgb(253, 199, 199),
    // Binary Yellow Colors
    YELLOW: yellow '!default',
    YELLOW1x1: rgb(210, 214, 6),
    YELLOW2x1: rgb(141, 165, 6),
    YELLOW3x1: rgb(133, 131, 3),
    YELLOW4x1: rgb(66, 54, 1),
    YELLOW5x1: rgb(43, 39, 1),
    YELLOW6x1: rgb(26, 24, 1),
    YELLOW7x1: rgb(14, 13, 0),
    /* 2 */
    YELLOW1x2: rgb(255, 242, 58),
    YELLOW1x3: rgb(252, 236, 97),
    YELLOW1x4: rgb(250, 237, 122),
    YELLOW1x5: rgb(255, 235, 148),
    YELLOW1x6: rgb(250, 235, 168),
    YELLOW1x7: rgb(253, 243, 199),
    // Binary Cyan Colors
    CYAN: cyan '!default',
    CYAN1x1: rgb(6, 214, 204),
    CYAN2x1: rgb(6, 160, 165),
    CYAN3x1: rgb(3, 133, 133),
    CYAN4x1: rgb(1, 64, 66),
    CYAN5x1: rgb(1, 42, 43),
    CYAN6x1: rgb(1, 25, 26),
    CYAN7x1: rgb(0, 12, 14),
    /* 2 */
    CYAN1x2: rgb(58, 255, 255),
    CYAN1x3: rgb(97, 252, 244),
    CYAN1x4: rgb(122, 246, 250),
    CYAN1x5: rgb(148, 248, 255),
    CYAN1x6: rgb(168, 250, 250),
    CYAN1x7: rgb(199, 253, 250),
    // Binary Violet Colors
    VIOLET: violet '!default',
    VIOLET1x1: rgb(190, 6, 214),
    VIOLET2x1: rgb(152, 6, 165),
    VIOLET3x1: rgb(133, 3, 133),
    VIOLET4x1: rgb(64, 1, 66),
    VIOLET5x1: rgb(38, 1, 43),
    VIOLET6x1: rgb(26, 1, 26),
    VIOLET7x1: rgb(14, 0, 13),
    /* 2 */
    VIOLET1x2: rgb(239, 58, 255),
    VIOLET1x3: rgb(252, 97, 244),
    VIOLET1x4: rgb(250, 122, 244),
    VIOLET1x5: rgb(255, 148, 250),
    VIOLET1x6: rgb(250, 168, 250),
    VIOLET1x7: rgb(251, 199, 253),
    // Binary Tomato Colors
    TOMATO: tomato '!default',
    TOMATO1x1: rgb(214, 65, 6),
    TOMATO2x1: rgb(165, 70, 6),
    TOMATO3x1: rgb(133, 55, 3),
    TOMATO4x1: rgb(66, 22, 1),
    TOMATO5x1: rgb(43, 13, 1),
    TOMATO6x1: rgb(26, 8, 1),
    TOMATO7x1: rgb(14, 4, 0),
    /* 2 */
    TOMATO1x2: rgb(255, 130, 58),
    TOMATO1x3: rgb(252, 167, 97),
    TOMATO1x4: rgb(250, 180, 122),
    TOMATO1x5: rgb(255, 212, 148),
    TOMATO1x6: rgb(250, 208, 168),
    TOMATO1x7: rgb(253, 219, 199),
    // Binary Steelblue Colors
    STEELBLUE: steelblue '!default',
    STEELBLUE1x1: rgb(6, 131, 214),
    STEELBLUE2x1: rgb(6, 107, 165),
    STEELBLUE3x1: rgb(3, 75, 133),
    STEELBLUE4x1: rgb(1, 51, 66),
    STEELBLUE5x1: rgb(1, 26, 43),
    STEELBLUE6x1: rgb(1, 23, 26),
    STEELBLUE7x1: rgb(0, 9, 14),
    /* 2 */
    STEELBLUE1x2: rgb(58, 160, 255),
    STEELBLUE1x3: rgb(97, 190, 252),
    STEELBLUE1x4: rgb(122, 199, 250),
    STEELBLUE1x5: rgb(148, 212, 255),
    STEELBLUE1x6: rgb(168, 217, 250),
    STEELBLUE1x7: rgb(199, 236, 253),
    // Binary Salmon Colors
    SALMON: salmon '!default',
    SALMON1x1: rgb(214, 72, 6),
    SALMON2x1: rgb(165, 70, 6),
    SALMON3x1: rgb(133, 51, 3),
    SALMON4x1: rgb(66, 36, 1),
    SALMON5x1: rgb(43, 21, 1),
    SALMON6x1: rgb(26, 14, 1),
    SALMON7x1: rgb(14, 6, 0),
    /* 2 */
    SALMON1x2: rgb(255, 130, 58),
    SALMON1x3: rgb(252, 159, 97),
    SALMON1x4: rgb(250, 184, 122),
    SALMON1x5: rgb(255, 200, 148),
    SALMON1x6: rgb(250, 212, 168),
    SALMON1x7: rgb(253, 225, 199),
    // Binary Tan Colors
    TAN: tan '!default',
    TAN1x1: rgb(214, 124, 6),
    TAN2x1: rgb(165, 96, 6),
    TAN3x1: rgb(133, 77, 3),
    TAN4x1: rgb(66, 40, 1),
    TAN5x1: rgb(43, 23, 1),
    TAN6x1: rgb(26, 17, 1),
    TAN7x1: rgb(14, 9, 0),
    /* 2 */
    TAN1x2: rgb(255, 176, 58),
    TAN1x3: rgb(252, 185, 97),
    TAN1x4: rgb(250, 205, 122),
    TAN1x5: rgb(255, 226, 148),
    TAN1x6: rgb(250, 228, 168),
    TAN1x7: rgb(253, 234, 199),
    // Binary Royalblue Colors
    ROYALBLUE: royalblue '!default',
    ROYALBLUE1x1: rgb(6, 55, 214),
    ROYALBLUE2x1: rgb(6, 48, 165),
    ROYALBLUE3x1: rgb(3, 27, 133),
    ROYALBLUE4x1: rgb(1, 18, 66),
    ROYALBLUE5x1: rgb(1, 7, 43),
    ROYALBLUE6x1: rgb(1, 3, 26),
    ROYALBLUE7x1: rgb(0, 1, 14),
    /* 2 */
    ROYALBLUE1x2: rgb(58, 61, 255),
    ROYALBLUE1x3: rgb(97, 112, 252),
    ROYALBLUE1x4: rgb(122, 152, 250),
    ROYALBLUE1x5: rgb(148, 173, 255),
    ROYALBLUE1x6: rgb(168, 183, 250),
    ROYALBLUE1x7: rgb(199, 200, 253),
    // Binary Coral Colors
    CORAL: Coral '!default',
    CORAL1x1: rgb(214, 89, 6),
    CORAL2x1: rgb(165, 96, 6),
    CORAL3x1: rgb(133, 66, 3),
    CORAL4x1: rgb(66, 36, 1),
    CORAL5x1: rgb(43, 32, 1),
    CORAL6x1: rgb(26, 14, 1),
    CORAL7x1: rgb(14, 7, 0),
    /* 2 */
    CORAL1x2: rgb(255, 170, 58),
    CORAL1x3: rgb(252, 190, 97),
    CORAL1x4: rgb(250, 205, 122),
    CORAL1x5: rgb(255, 226, 148),
    CORAL1x6: rgb(250, 208, 168),
    CORAL1x7: rgb(253, 231, 199),
    // Binary Crimson Colors
    CRIMSON: crimson '!default',
    CRIMSON1x1: rgb(214, 6, 86),
    CRIMSON2x1: rgb(165, 6, 59),
    CRIMSON3x1: rgb(133, 3, 53),
    CRIMSON4x1: rgb(66, 1, 28),
    CRIMSON5x1: rgb(43, 1, 15),
    CRIMSON6x1: rgb(26, 1, 9),
    CRIMSON7x1: rgb(14, 0, 7),
    /* 2 */
    CRIMSON1x2: rgb(255, 58, 124),
    CRIMSON1x3: rgb(252, 97, 156),
    CRIMSON1x4: rgb(250, 122, 175),
    CRIMSON1x5: rgb(255, 148, 180),
    CRIMSON1x6: rgb(250, 168, 182),
    CRIMSON1x7: rgb(253, 199, 211),
    // Binary Cornflowerblue Colors
    CORNFLOWERBLUE: cornflowerblue '!default',
    CORNFLOWERBLUE1x1: rgb(6, 96, 214),
    CORNFLOWERBLUE2x1: rgb(6, 75, 165),
    CORNFLOWERBLUE3x1: rgb(3, 55, 133),
    CORNFLOWERBLUE4x1: rgb(1, 29, 66),
    CORNFLOWERBLUE5x1: rgb(1, 21, 43),
    CORNFLOWERBLUE6x1: rgb(1, 9, 26),
    CORNFLOWERBLUE7x1: rgb(0, 4, 14),
    /* 2 */
    CORNFLOWERBLUE1x2: rgb(58, 110, 255),
    CORNFLOWERBLUE1x3: rgb(97, 164, 252),
    CORNFLOWERBLUE1x4: rgb(122, 167, 250),
    CORNFLOWERBLUE1x5: rgb(148, 173, 255),
    CORNFLOWERBLUE1x6: rgb(168, 190, 250),
    CORNFLOWERBLUE1x7: rgb(199, 218, 253),
    // Binary Chocolate Colors
    CHOCOLATE: chocolate '!default',
    CHOCOLATE1x1: rgb(214, 131, 6),
    CHOCOLATE2x1: rgb(165, 96, 6),
    CHOCOLATE3x1: rgb(133, 88, 3),
    CHOCOLATE4x1: rgb(66, 45, 1),
    CHOCOLATE5x1: rgb(43, 25, 1),
    CHOCOLATE6x1: rgb(26, 13, 1),
    CHOCOLATE7x1: rgb(14, 7, 0),
    /* 2 */
    CHOCOLATE1x2: rgb(255, 163, 58),
    CHOCOLATE1x3: rgb(252, 172, 97),
    CHOCOLATE1x4: rgb(250, 194, 122),
    CHOCOLATE1x5: rgb(255, 196, 148),
    CHOCOLATE1x6: rgb(250, 205, 168),
    CHOCOLATE1x7: rgb(253, 221, 199),
    // Binary Orange Colors
    ORANGE: orange '!default',
    ORANGE1x1: rgb(214, 165, 6),
    ORANGE2x1: rgb(165, 128, 6),
    ORANGE3x1: rgb(133, 98, 3),
    ORANGE4x1: rgb(66, 51, 1),
    ORANGE5x1: rgb(43, 32, 1),
    ORANGE6x1: rgb(26, 16, 1),
    ORANGE7x1: rgb(14, 10, 0),
    /* 2 */
    ORANGE1x2: rgb(255, 193, 58),
    ORANGE1x3: rgb(252, 198, 97),
    ORANGE1x4: rgb(250, 216, 122),
    ORANGE1x5: rgb(255, 218, 148),
    ORANGE1x6: rgb(250, 217, 168),
    ORANGE1x7: rgb(253, 230, 199),
    // Binary Springgreen Colors
    SPRINGGREEN: springgreen '!default',
    SPRINGGREEN1x1: rgb(6, 214, 162),
    SPRINGGREEN2x1: rgb(6, 165, 117),
    SPRINGGREEN3x1: rgb(3, 133, 83),
    SPRINGGREEN4x1: rgb(1, 66, 41),
    SPRINGGREEN5x1: rgb(1, 43, 26),
    SPRINGGREEN6x1: rgb(1, 26, 18),
    SPRINGGREEN7x1: rgb(0, 14, 9),
    /* 2 */
    SPRINGGREEN1x2: rgb(58, 255, 179),
    SPRINGGREEN1x3: rgb(97, 252, 187),
    SPRINGGREEN1x4: rgb(122, 250, 197),
    SPRINGGREEN1x5: rgb(148, 255, 214),
    SPRINGGREEN1x6: rgb(168, 250, 218),
    SPRINGGREEN1x7: rgb(199, 253, 235),
    // Binary White Color
    WHITE: white '!default',
    // Binary Antiquewhite Color
    ANTIQUEWHITE: antiquewhite '!default',
    // Binary Azure Color
    AZURE: azure '!default',
    // Binary Aliceblue Color
    ALICEBLUE: aliceblue '!default',
    // Binary Black Color
    BLACK: black '!default',
);


// For Gradient Colors See src/_gradient.scss File

// NOTE: All Colors Used Only! In SASS(scss) Files Becuase { map-get } Code, NOT Used In CSS(css) Files;
// More Colors In Next Version